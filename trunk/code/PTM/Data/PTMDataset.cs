//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

namespace PTM.Data
{
	[Serializable()]
	[DesignerCategory("code")]
	[DebuggerStepThrough()]
	[ToolboxItem(true)]
	public class PTMDataset : DataSet
	{
		private TasksDataTable tableTasks;

		private DataRelation relationTasksTasks;

		public PTMDataset()
		{
			this.InitClass();
			CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

		protected PTMDataset(SerializationInfo info, StreamingContext context)
		{
			string strSchema = ((string) (info.GetValue("XmlSchema", typeof (string))));
			if ((strSchema != null))
			{
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
				if ((ds.Tables["Tasks"] != null))
				{
					this.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.InitClass();
			}
			this.GetSerializationData(info, context);
			CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public TasksDataTable Tasks
		{
			get { return this.tableTasks; }
		}

		public override DataSet Clone()
		{
			PTMDataset cln = ((PTMDataset) (base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override bool ShouldSerializeTables()
		{
			return false;
		}

		protected override bool ShouldSerializeRelations()
		{
			return false;
		}

		protected override void ReadXmlSerializable(XmlReader reader)
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["Tasks"] != null))
			{
				this.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, MissingSchemaAction.Add);
			this.InitVars();
		}

		protected override XmlSchema GetSchemaSerializable()
		{
			MemoryStream stream = new MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;
			return XmlSchema.Read(new XmlTextReader(stream), null);
		}

		internal void InitVars()
		{
			this.tableTasks = ((TasksDataTable) (this.Tables["Tasks"]));
			if ((this.tableTasks != null))
			{
				this.tableTasks.InitVars();
			}
			this.relationTasksTasks = this.Relations["TasksTasks"];
		}

		private void InitClass()
		{
			this.DataSetName = "PTMDataset";
			this.Prefix = "";
			this.Namespace = "http://www.tempuri.org/PTMDataset.xsd";
			this.Locale = new CultureInfo("en-US");
			this.CaseSensitive = false;
			this.EnforceConstraints = true;
			this.tableTasks = new TasksDataTable();
			this.Tables.Add(this.tableTasks);
			ForeignKeyConstraint fkc;
			fkc = new ForeignKeyConstraint("TasksTasks", new DataColumn[]
			                                             	{
			                                             		this.tableTasks.IdColumn
			                                             	}, new DataColumn[]
			                                             	   	{
			                                             	   		this.tableTasks.ParentIdColumn
			                                             	   	});
			this.tableTasks.Constraints.Add(fkc);
			fkc.AcceptRejectRule = AcceptRejectRule.None;
			fkc.DeleteRule = Rule.Cascade;
			fkc.UpdateRule = Rule.Cascade;
			this.relationTasksTasks = new DataRelation("TasksTasks", new DataColumn[]
			                                                         	{
			                                                         		this.tableTasks.IdColumn
			                                                         	}, new DataColumn[]
			                                                         	   	{
			                                                         	   		this.tableTasks.ParentIdColumn
			                                                         	   	}, false);
			this.Relations.Add(this.relationTasksTasks);
		}

		private bool ShouldSerializeTasks()
		{
			return false;
		}

		private void SchemaChanged(object sender, CollectionChangeEventArgs e)
		{
			if ((e.Action == CollectionChangeAction.Remove))
			{
				this.InitVars();
			}
		}

		public delegate void TasksRowChangeEventHandler(object sender, TasksRowChangeEvent e);

		[DebuggerStepThrough()]
		public class TasksDataTable : DataTable, IEnumerable
		{
			private DataColumn columnId;

			private DataColumn columnParentId;

			private DataColumn columnDescription;

			private DataColumn columnStartDate;

			private DataColumn columnStopDate;

			private DataColumn columnIsFinished;

			private DataColumn columnTotalTime;

			private DataColumn columnIconId;

			private DataColumn columnIsActive;

			internal TasksDataTable() :
				base("Tasks")
			{
				this.InitClass();
			}

			internal TasksDataTable(DataTable table) :
				base(table.TableName)
			{
				if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				{
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace))
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
				this.DisplayExpression = table.DisplayExpression;
			}

			[Browsable(false)]
			public int Count
			{
				get { return this.Rows.Count; }
			}

			internal DataColumn IdColumn
			{
				get { return this.columnId; }
			}

			internal DataColumn ParentIdColumn
			{
				get { return this.columnParentId; }
			}

			internal DataColumn DescriptionColumn
			{
				get { return this.columnDescription; }
			}

			internal DataColumn StartDateColumn
			{
				get { return this.columnStartDate; }
			}

			internal DataColumn StopDateColumn
			{
				get { return this.columnStopDate; }
			}

			internal DataColumn IsFinishedColumn
			{
				get { return this.columnIsFinished; }
			}

			internal DataColumn TotalTimeColumn
			{
				get { return this.columnTotalTime; }
			}

			internal DataColumn IconIdColumn
			{
				get { return this.columnIconId; }
			}

			internal DataColumn IsActiveColumn
			{
				get { return this.columnIsActive; }
			}

			public TasksRow this[int index]
			{
				get { return ((TasksRow) (this.Rows[index])); }
			}

			public event TasksRowChangeEventHandler TasksRowChanged;

			public event TasksRowChangeEventHandler TasksRowChanging;

			public event TasksRowChangeEventHandler TasksRowDeleted;

			public event TasksRowChangeEventHandler TasksRowDeleting;

			public void AddTasksRow(TasksRow row)
			{
				this.Rows.Add(row);
			}

			public TasksRow AddTasksRow(TasksRow parentTasksRowByTasksTasks, string Description, DateTime StartDate,
			                            DateTime StopDate, bool IsFinished, int TotalTime, int IconId, bool IsActive)
			{
				TasksRow rowTasksRow = ((TasksRow) (this.NewRow()));
				rowTasksRow.ItemArray = new object[]
					{
						null,
						parentTasksRowByTasksTasks[0],
						Description,
						StartDate,
						StopDate,
						IsFinished,
						TotalTime,
						IconId,
						IsActive
					};
				this.Rows.Add(rowTasksRow);
				return rowTasksRow;
			}

			public TasksRow FindById(int Id)
			{
				return ((TasksRow) (this.Rows.Find(new object[]
				                                   	{
				                                   		Id
				                                   	})));
			}

			public IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}

			public override DataTable Clone()
			{
				TasksDataTable cln = ((TasksDataTable) (base.Clone()));
				cln.InitVars();
				return cln;
			}

			protected override DataTable CreateInstance()
			{
				return new TasksDataTable();
			}

			internal void InitVars()
			{
				this.columnId = this.Columns["Id"];
				this.columnParentId = this.Columns["ParentId"];
				this.columnDescription = this.Columns["Description"];
				this.columnStartDate = this.Columns["StartDate"];
				this.columnStopDate = this.Columns["StopDate"];
				this.columnIsFinished = this.Columns["IsFinished"];
				this.columnTotalTime = this.Columns["TotalTime"];
				this.columnIconId = this.Columns["IconId"];
				this.columnIsActive = this.Columns["IsActive"];
			}

			private void InitClass()
			{
				this.columnId = new DataColumn("Id", typeof (int), null, MappingType.Element);
				this.Columns.Add(this.columnId);
				this.columnParentId = new DataColumn("ParentId", typeof (int), null, MappingType.Element);
				this.Columns.Add(this.columnParentId);
				this.columnDescription = new DataColumn("Description", typeof (string), null, MappingType.Element);
				this.Columns.Add(this.columnDescription);
				this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), null, MappingType.Element);
				this.Columns.Add(this.columnStartDate);
				this.columnStopDate = new DataColumn("StopDate", typeof (DateTime), null, MappingType.Element);
				this.Columns.Add(this.columnStopDate);
				this.columnIsFinished = new DataColumn("IsFinished", typeof (bool), null, MappingType.Element);
				this.Columns.Add(this.columnIsFinished);
				this.columnTotalTime = new DataColumn("TotalTime", typeof (int), null, MappingType.Element);
				this.Columns.Add(this.columnTotalTime);
				this.columnIconId = new DataColumn("IconId", typeof (int), null, MappingType.Element);
				this.Columns.Add(this.columnIconId);
				this.columnIsActive = new DataColumn("IsActive", typeof (bool), null, MappingType.Element);
				this.Columns.Add(this.columnIsActive);
				this.Constraints.Add(new UniqueConstraint("PTMDatasetKey1", new DataColumn[]
				                                                            	{
				                                                            		this.columnId
				                                                            	}, true));
				this.columnId.AutoIncrement = true;
				this.columnId.AllowDBNull = false;
				this.columnId.Unique = true;
			}

			public TasksRow NewTasksRow()
			{
				return ((TasksRow) (this.NewRow()));
			}

			protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
			{
				return new TasksRow(builder);
			}

			protected override Type GetRowType()
			{
				return typeof (TasksRow);
			}

			protected override void OnRowChanged(DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TasksRowChanged != null))
				{
					this.TasksRowChanged(this, new TasksRowChangeEvent(((TasksRow) (e.Row)), e.Action));
				}
			}

			protected override void OnRowChanging(DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TasksRowChanging != null))
				{
					this.TasksRowChanging(this, new TasksRowChangeEvent(((TasksRow) (e.Row)), e.Action));
				}
			}

			protected override void OnRowDeleted(DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TasksRowDeleted != null))
				{
					this.TasksRowDeleted(this, new TasksRowChangeEvent(((TasksRow) (e.Row)), e.Action));
				}
			}

			protected override void OnRowDeleting(DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TasksRowDeleting != null))
				{
					this.TasksRowDeleting(this, new TasksRowChangeEvent(((TasksRow) (e.Row)), e.Action));
				}
			}

			public void RemoveTasksRow(TasksRow row)
			{
				this.Rows.Remove(row);
			}
		}

		[DebuggerStepThrough()]
		public class TasksRow : DataRow
		{
			private TasksDataTable tableTasks;

			internal TasksRow(DataRowBuilder rb) :
				base(rb)
			{
				this.tableTasks = ((TasksDataTable) (this.Table));
			}

			public int Id
			{
				get { return ((int) (this[this.tableTasks.IdColumn])); }
				set { this[this.tableTasks.IdColumn] = value; }
			}

			public int ParentId
			{
				get
				{
					try
					{
						return ((int) (this[this.tableTasks.ParentIdColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.ParentIdColumn] = value; }
			}

			public string Description
			{
				get
				{
					try
					{
						return ((string) (this[this.tableTasks.DescriptionColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.DescriptionColumn] = value; }
			}

			public DateTime StartDate
			{
				get
				{
					try
					{
						return ((DateTime) (this[this.tableTasks.StartDateColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.StartDateColumn] = value; }
			}

			public DateTime StopDate
			{
				get
				{
					try
					{
						return ((DateTime) (this[this.tableTasks.StopDateColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.StopDateColumn] = value; }
			}

			public bool IsFinished
			{
				get
				{
					try
					{
						return ((bool) (this[this.tableTasks.IsFinishedColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.IsFinishedColumn] = value; }
			}

			public int TotalTime
			{
				get
				{
					try
					{
						return ((int) (this[this.tableTasks.TotalTimeColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.TotalTimeColumn] = value; }
			}

			public int IconId
			{
				get
				{
					try
					{
						return ((int) (this[this.tableTasks.IconIdColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.IconIdColumn] = value; }
			}

			public bool IsActive
			{
				get
				{
					try
					{
						return ((bool) (this[this.tableTasks.IsActiveColumn]));
					}
					catch (InvalidCastException e)
					{
						throw new StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set { this[this.tableTasks.IsActiveColumn] = value; }
			}

			public TasksRow TasksRowParent
			{
				get { return ((TasksRow) (this.GetParentRow(this.Table.ParentRelations["TasksTasks"]))); }
				set { this.SetParentRow(value, this.Table.ParentRelations["TasksTasks"]); }
			}

			public bool IsParentIdNull()
			{
				return this.IsNull(this.tableTasks.ParentIdColumn);
			}

			public void SetParentIdNull()
			{
				this[this.tableTasks.ParentIdColumn] = Convert.DBNull;
			}

			public bool IsDescriptionNull()
			{
				return this.IsNull(this.tableTasks.DescriptionColumn);
			}

			public void SetDescriptionNull()
			{
				this[this.tableTasks.DescriptionColumn] = Convert.DBNull;
			}

			public bool IsStartDateNull()
			{
				return this.IsNull(this.tableTasks.StartDateColumn);
			}

			public void SetStartDateNull()
			{
				this[this.tableTasks.StartDateColumn] = Convert.DBNull;
			}

			public bool IsStopDateNull()
			{
				return this.IsNull(this.tableTasks.StopDateColumn);
			}

			public void SetStopDateNull()
			{
				this[this.tableTasks.StopDateColumn] = Convert.DBNull;
			}

			public bool IsIsFinishedNull()
			{
				return this.IsNull(this.tableTasks.IsFinishedColumn);
			}

			public void SetIsFinishedNull()
			{
				this[this.tableTasks.IsFinishedColumn] = Convert.DBNull;
			}

			public bool IsTotalTimeNull()
			{
				return this.IsNull(this.tableTasks.TotalTimeColumn);
			}

			public void SetTotalTimeNull()
			{
				this[this.tableTasks.TotalTimeColumn] = Convert.DBNull;
			}

			public bool IsIconIdNull()
			{
				return this.IsNull(this.tableTasks.IconIdColumn);
			}

			public void SetIconIdNull()
			{
				this[this.tableTasks.IconIdColumn] = Convert.DBNull;
			}

			public bool IsIsActiveNull()
			{
				return this.IsNull(this.tableTasks.IsActiveColumn);
			}

			public void SetIsActiveNull()
			{
				this[this.tableTasks.IsActiveColumn] = Convert.DBNull;
			}

			public TasksRow[] GetTasksRows()
			{
				return ((TasksRow[]) (this.GetChildRows(this.Table.ChildRelations["TasksTasks"])));
			}
		}

		[DebuggerStepThrough()]
		public class TasksRowChangeEvent : EventArgs
		{
			private TasksRow eventRow;

			private DataRowAction eventAction;

			public TasksRowChangeEvent(TasksRow row, DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}

			public TasksRow Row
			{
				get { return this.eventRow; }
			}

			public DataRowAction Action
			{
				get { return this.eventAction; }
			}
		}
	}
}