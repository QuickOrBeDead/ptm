//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace PTM.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SummaryDataset : DataSet {
        
        private ApplicationsSummaryDataTable tableApplicationsSummary;
        
        public SummaryDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SummaryDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ApplicationsSummary"] != null)) {
                    this.Tables.Add(new ApplicationsSummaryDataTable(ds.Tables["ApplicationsSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplicationsSummaryDataTable ApplicationsSummary {
            get {
                return this.tableApplicationsSummary;
            }
        }
        
        public override DataSet Clone() {
            SummaryDataset cln = ((SummaryDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ApplicationsSummary"] != null)) {
                this.Tables.Add(new ApplicationsSummaryDataTable(ds.Tables["ApplicationsSummary"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableApplicationsSummary = ((ApplicationsSummaryDataTable)(this.Tables["ApplicationsSummary"]));
            if ((this.tableApplicationsSummary != null)) {
                this.tableApplicationsSummary.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "SummaryDataset";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/SummaryDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableApplicationsSummary = new ApplicationsSummaryDataTable();
            this.Tables.Add(this.tableApplicationsSummary);
        }
        
        private bool ShouldSerializeApplicationsSummary() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ApplicationsSummaryRowChangeEventHandler(object sender, ApplicationsSummaryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplicationsSummaryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTaskId;
            
            private DataColumn columnTotalActiveTime;
            
            private DataColumn columnTotalApplicationsLog;
            
            private DataColumn columnName;
            
            private DataColumn columnApplicationFullPath;
            
            internal ApplicationsSummaryDataTable() : 
                    base("ApplicationsSummary") {
                this.InitClass();
            }
            
            internal ApplicationsSummaryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TaskIdColumn {
                get {
                    return this.columnTaskId;
                }
            }
            
            internal DataColumn TotalActiveTimeColumn {
                get {
                    return this.columnTotalActiveTime;
                }
            }
            
            internal DataColumn TotalApplicationsLogColumn {
                get {
                    return this.columnTotalApplicationsLog;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ApplicationFullPathColumn {
                get {
                    return this.columnApplicationFullPath;
                }
            }
            
            public ApplicationsSummaryRow this[int index] {
                get {
                    return ((ApplicationsSummaryRow)(this.Rows[index]));
                }
            }
            
            public event ApplicationsSummaryRowChangeEventHandler ApplicationsSummaryRowChanged;
            
            public event ApplicationsSummaryRowChangeEventHandler ApplicationsSummaryRowChanging;
            
            public event ApplicationsSummaryRowChangeEventHandler ApplicationsSummaryRowDeleted;
            
            public event ApplicationsSummaryRowChangeEventHandler ApplicationsSummaryRowDeleting;
            
            public void AddApplicationsSummaryRow(ApplicationsSummaryRow row) {
                this.Rows.Add(row);
            }
            
            public ApplicationsSummaryRow AddApplicationsSummaryRow(int TaskId, System.Double TotalActiveTime, int TotalApplicationsLog, string Name, string ApplicationFullPath) {
                ApplicationsSummaryRow rowApplicationsSummaryRow = ((ApplicationsSummaryRow)(this.NewRow()));
                rowApplicationsSummaryRow.ItemArray = new object[] {
                        TaskId,
                        TotalActiveTime,
                        TotalApplicationsLog,
                        Name,
                        ApplicationFullPath};
                this.Rows.Add(rowApplicationsSummaryRow);
                return rowApplicationsSummaryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ApplicationsSummaryDataTable cln = ((ApplicationsSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ApplicationsSummaryDataTable();
            }
            
            internal void InitVars() {
                this.columnTaskId = this.Columns["TaskId"];
                this.columnTotalActiveTime = this.Columns["TotalActiveTime"];
                this.columnTotalApplicationsLog = this.Columns["TotalApplicationsLog"];
                this.columnName = this.Columns["Name"];
                this.columnApplicationFullPath = this.Columns["ApplicationFullPath"];
            }
            
            private void InitClass() {
                this.columnTaskId = new DataColumn("TaskId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskId);
                this.columnTotalActiveTime = new DataColumn("TotalActiveTime", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalActiveTime);
                this.columnTotalApplicationsLog = new DataColumn("TotalApplicationsLog", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalApplicationsLog);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnApplicationFullPath = new DataColumn("ApplicationFullPath", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplicationFullPath);
            }
            
            public ApplicationsSummaryRow NewApplicationsSummaryRow() {
                return ((ApplicationsSummaryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ApplicationsSummaryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ApplicationsSummaryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplicationsSummaryRowChanged != null)) {
                    this.ApplicationsSummaryRowChanged(this, new ApplicationsSummaryRowChangeEvent(((ApplicationsSummaryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplicationsSummaryRowChanging != null)) {
                    this.ApplicationsSummaryRowChanging(this, new ApplicationsSummaryRowChangeEvent(((ApplicationsSummaryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplicationsSummaryRowDeleted != null)) {
                    this.ApplicationsSummaryRowDeleted(this, new ApplicationsSummaryRowChangeEvent(((ApplicationsSummaryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplicationsSummaryRowDeleting != null)) {
                    this.ApplicationsSummaryRowDeleting(this, new ApplicationsSummaryRowChangeEvent(((ApplicationsSummaryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveApplicationsSummaryRow(ApplicationsSummaryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplicationsSummaryRow : DataRow {
            
            private ApplicationsSummaryDataTable tableApplicationsSummary;
            
            internal ApplicationsSummaryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplicationsSummary = ((ApplicationsSummaryDataTable)(this.Table));
            }
            
            public int TaskId {
                get {
                    try {
                        return ((int)(this[this.tableApplicationsSummary.TaskIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplicationsSummary.TaskIdColumn] = value;
                }
            }
            
            public System.Double TotalActiveTime {
                get {
                    try {
                        return ((System.Double)(this[this.tableApplicationsSummary.TotalActiveTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplicationsSummary.TotalActiveTimeColumn] = value;
                }
            }
            
            public int TotalApplicationsLog {
                get {
                    try {
                        return ((int)(this[this.tableApplicationsSummary.TotalApplicationsLogColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplicationsSummary.TotalApplicationsLogColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableApplicationsSummary.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplicationsSummary.NameColumn] = value;
                }
            }
            
            public string ApplicationFullPath {
                get {
                    try {
                        return ((string)(this[this.tableApplicationsSummary.ApplicationFullPathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplicationsSummary.ApplicationFullPathColumn] = value;
                }
            }
            
            public bool IsTaskIdNull() {
                return this.IsNull(this.tableApplicationsSummary.TaskIdColumn);
            }
            
            public void SetTaskIdNull() {
                this[this.tableApplicationsSummary.TaskIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalActiveTimeNull() {
                return this.IsNull(this.tableApplicationsSummary.TotalActiveTimeColumn);
            }
            
            public void SetTotalActiveTimeNull() {
                this[this.tableApplicationsSummary.TotalActiveTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalApplicationsLogNull() {
                return this.IsNull(this.tableApplicationsSummary.TotalApplicationsLogColumn);
            }
            
            public void SetTotalApplicationsLogNull() {
                this[this.tableApplicationsSummary.TotalApplicationsLogColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableApplicationsSummary.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableApplicationsSummary.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplicationFullPathNull() {
                return this.IsNull(this.tableApplicationsSummary.ApplicationFullPathColumn);
            }
            
            public void SetApplicationFullPathNull() {
                this[this.tableApplicationsSummary.ApplicationFullPathColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ApplicationsSummaryRowChangeEvent : EventArgs {
            
            private ApplicationsSummaryRow eventRow;
            
            private DataRowAction eventAction;
            
            public ApplicationsSummaryRowChangeEvent(ApplicationsSummaryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ApplicationsSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
